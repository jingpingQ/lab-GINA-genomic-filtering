stat_compare_means()+ylab("Number of mutations per patient")
C=ggboxplot(subtype, x = "tripleN_clinic", y = "exclu",
color = "tripleN_clinic", palette =c( "#E7B800", "#FC4E07"),
add = "jitter")+stat_compare_means(label.x.npc = "left",label.y.npc = "bottom")+ # Add pairwise comparisons p-value
stat_compare_means()+ylab("Number of mutations per patient")
D=ggboxplot(subtype, x = "tripleN_clinic", y = "trunk_percentage",
color = "tripleN_clinic", palette =c( "#E7B800", "#FC4E07"),
add = "jitter")+stat_compare_means(label.x.npc = "left",label.y.npc = "bottom")+ # Add pairwise comparisons p-value
stat_compare_means()+ylab("Truncality")
A=ggboxplot(subtype, x = "tripleN_clinic", y = "sor_eta",
color = "tripleN_clinic", palette =c( "#E7B800", "#FC4E07"),
add = "jitter")+stat_compare_means(label.x.npc = "left",label.y.npc = "bottom")+ # Add pairwise comparisons p-value
stat_compare_means()+ylab("Heterogeneity by Sorensen Index")
B=ggboxplot(subtype, x = "tripleN_clinic", y = "nmut",
color = "tripleN_clinic", palette =c( "#E7B800", "#FC4E07"),
add = "jitter")+stat_compare_means(label.x.npc = "left",label.y.npc = "bottom")+ # Add pairwise comparisons p-value
stat_compare_means()+ylab("Number of mutations per patient")
C=ggboxplot(subtype, x = "tripleN_clinic", y = "linear_all",
color = "tripleN_clinic", palette =c( "#E7B800", "#FC4E07"),
add = "jitter")+stat_compare_means(label.x.npc = "left",label.y.npc = "bottom")+ # Add pairwise comparisons p-value
stat_compare_means()+ylab("Linearity")
D=ggboxplot(subtype, x = "tripleN_clinic", y = "trunk_percentage",
color = "tripleN_clinic", palette =c( "#E7B800", "#FC4E07"),
add = "jitter")+stat_compare_means(label.x.npc = "left",label.y.npc = "bottom")+ # Add pairwise comparisons p-value
stat_compare_means()+ylab("Truncality")
cowplot::plot_grid(A, B, labels = "AUTO")
cowplot::plot_grid(C, D, labels = "AUTO")
cowplot::plot_grid(A, B, labels = "AUTO")
ggboxplot(subtype, x = "tripleN_clinic", y = "sor_eta",
color = "tripleN_clinic", palette =c( "#E7B800", "#FC4E07"),
add = "jitter")+stat_compare_means(label.x.npc = "left",label.y.npc = "bottom")+ # Add pairwise comparisons p-value
stat_compare_means()+ylab("Heterogeneity by Sorensen Index")+geom_pwc(method = "wilcoxon")
ggboxplot(subtype, x = "tripleN_clinic", y = "linear_mut",
color = "tripleN_clinic", palette =c( "#E7B800", "#FC4E07"),
add = "jitter")+stat_compare_means(label.x.npc = "left",label.y.npc = "bottom")+ # Add pairwise comparisons p-value
stat_compare_means()+ylab("Linearity")
A=ggboxplot(subtype, x = "tripleN_clinic", y = "sor_eta",
color = "tripleN_clinic", palette =c( "#E7B800", "#FC4E07"),
add = "jitter")+stat_compare_means(label.x.npc = "left",label.y.npc = "bottom")+ # Add pairwise comparisons p-value
stat_compare_means()+ylab("Heterogeneity by Sorensen Index")+geom_pwc(method = "wilcoxon")
B=ggboxplot(subtype, x = "tripleN_clinic", y = "nmut",
color = "tripleN_clinic", palette =c( "#E7B800", "#FC4E07"),
add = "jitter")+stat_compare_means(label.x.npc = "left",label.y.npc = "bottom")+ # Add pairwise comparisons p-value
stat_compare_means()+ylab("Number of mutations per patient")
C=ggboxplot(subtype, x = "tripleN_clinic", y = "linear_all",
color = "tripleN_clinic", palette =c( "#E7B800", "#FC4E07"),
add = "jitter")+stat_compare_means(label.x.npc = "left",label.y.npc = "bottom")+ # Add pairwise comparisons p-value
stat_compare_means()+ylab("Linearity")
D=ggboxplot(subtype, x = "tripleN_clinic", y = "trunk_percentage",
color = "tripleN_clinic", palette =c( "#E7B800", "#FC4E07"),
add = "jitter")+stat_compare_means(label.x.npc = "left",label.y.npc = "bottom")+ # Add pairwise comparisons p-value
stat_compare_means()+ylab("Truncality")
cowplot::plot_grid(A, B, labels = "AUTO")
cowplot::plot_grid(C, D, labels = "AUTO")
C=ggboxplot(subtype, x = "tripleN_clinic", y = "linear_all",
color = "tripleN_clinic", palette =c( "#E7B800", "#FC4E07"),
add = "jitter")+stat_compare_means(label.x.npc = "right",label.y.npc = "bottom")+ # Add pairwise comparisons p-value
stat_compare_means()+ylab("Linearity")
D=ggboxplot(subtype, x = "tripleN_clinic", y = "trunk_percentage",
color = "tripleN_clinic", palette =c( "#E7B800", "#FC4E07"),
add = "jitter")+stat_compare_means(label.x.npc = "right",label.y.npc = "bottom")+ # Add pairwise comparisons p-value
stat_compare_means()+ylab("Truncality")
cowplot::plot_grid(C, D, labels = "AUTO")
C=ggboxplot(subtype, x = "tripleN_clinic", y = "linear_all",
color = "tripleN_clinic", palette =c( "#E7B800", "#FC4E07"),
add = "jitter")+stat_compare_means()+ # Add pairwise comparisons p-value
stat_compare_means()+ylab("Linearity")
D=ggboxplot(subtype, x = "tripleN_clinic", y = "trunk_percentage",
color = "tripleN_clinic", palette =c( "#E7B800", "#FC4E07"),
add = "jitter")+stat_compare_means()+ # Add pairwise comparisons p-value
stat_compare_means()+ylab("Truncality")
cowplot::plot_grid(C, D, labels = "AUTO")
shapiro.test(subtype$trunk_percentage)
shapiro.test(subtype$nmut)
shapiro.test(subtype$sor_eta)
p.adjust(wilcox.test(subtype$linear_all~subtype$tripleN_clinic)$p,wilcox.test(subtype$nmut~subtype$tripleN_clinic),wilcox.test(subtype$sor_eta~subtype$tripleN_clinic),wilcox.test(subtype$trunk_percentage~subtype$tripleN_clinic))
wilcox.test(subtype$sor_eta~subtype$tripleN_clinic)$p
wilcox.test(subtype$sor_eta~subtype$tripleN_clinic)$p.value
wilcox.test(subtype$sor_eta~subtype$tripleN_clinic)[[1]]
wilcox.test(subtype$sor_eta~subtype$tripleN_clinic)[[2]]
wilcox.test(subtype$sor_eta~subtype$tripleN_clinic)[[3]]
p.adjust(wilcox.test(subtype$linear_all~subtype$tripleN_clinic)[[3]],wilcox.test(subtype$nmut~subtype$tripleN_clinic)[[3]],wilcox.test(subtype$sor_eta~subtype$tripleN_clinic)[[3]],wilcox.test(subtype$trunk_percentage~subtype$tripleN_clinic)[[3]])
p.adjust(as.numeric(wilcox.test(subtype$linear_all~subtype$tripleN_clinic)[[3]],wilcox.test(subtype$nmut~subtype$tripleN_clinic)[[3]],wilcox.test(subtype$sor_eta~subtype$tripleN_clinic)[[3]],wilcox.test(subtype$trunk_percentage~subtype$tripleN_clinic)[[3]]))
ps=as.numeric(wilcox.test(subtype$linear_all~subtype$tripleN_clinic)[[3]],wilcox.test(subtype$nmut~subtype$tripleN_clinic)[[3]],wilcox.test(subtype$sor_eta~subtype$tripleN_clinic)[[3]],wilcox.test(subtype$trunk_percentage~subtype$tripleN_clinic)[[3]])
p
ps
ps=as.numeric(c(wilcox.test(subtype$linear_all~subtype$tripleN_clinic)[[3]],wilcox.test(subtype$nmut~subtype$tripleN_clinic)[[3]],wilcox.test(subtype$sor_eta~subtype$tripleN_clinic)[[3]],wilcox.test(subtype$trunk_percentage~subtype$tripleN_clinic)[[3]]))
ps
p.adjust(ps)
#perform exact test
exact_pvalue <-
wilcox.test( subtype$nmut~ subtype$tripleN_clinic, paired = TRUE, exact = TRUE) %>%
# Format the test output as a tibble
broom::tidy() %>%
# Format the p-value
mutate(pval_fmt = format.pval(p.value, digits = 8)) %>%
# Specify position in (c1, c2) coordinates
mutate(c1 = 1, c2 = 0)
#perform exact test
exact_pvalue <-
wilcox.test( subtype$nmut~ subtype$tripleN_clinic, exact = TRUE) %>%
# Format the test output as a tibble
broom::tidy() %>%
# Format the p-value
mutate(pval_fmt = format.pval(p.value, digits = 8)) %>%
# Specify position in (c1, c2) coordinates
mutate(c1 = 1, c2 = 0)
exact_pvalue
#perform exact test
exact_pvalue <-
wilcox.test( subtype$linear_all~ subtype$tripleN_clinic, exact = TRUE) %>%
# Format the test output as a tibble
broom::tidy() %>%
# Format the p-value
mutate(pval_fmt = format.pval(p.value, digits = 8)) %>%
# Specify position in (c1, c2) coordinates
mutate(c1 = 1, c2 = 0)
exact_pvalue
wilcox.test( subtype$linear_all~ subtype$tripleN_clinic, exact = TRUE)
#perform exact test
exact_pvalue <-
wilcox.test( subtype$linear_all~ subtype$tripleN_clinic) %>%
# Format the test output as a tibble
broom::tidy() %>%
# Format the p-value
mutate(pval_fmt = format.pval(p.value, digits = 8)) %>%
# Specify position in (c1, c2) coordinates
mutate(c1 = 1, c2 = 0)
wilcox.test( subtype$linear_all~ subtype$tripleN_clinic)
#perform exact test
pvals=as.numeric(c(wilcox.test(subtype$sor_eta~subtype$tripleN_clinic)[[3]],
wilcox.test(subtype$nmut~subtype$tripleN_clinic)[[3]],
wilcox.test(subtype$linear_all~subtype$tripleN_clinic)[[3]],
wilcox.test(subtype$trunk_percentage~subtype$tripleN_clinic)[[3]]))
p.adjust(pvals)
ggboxplot(subtype, x = "tripleN_clinic", y = "sor_eta",
color = "tripleN_clinic", palette =c( "#E7B800", "#FC4E07"),
add = "jitter")+  geom_text(aes(label = glue::glue("Wilcoxon p = {pval_fmt}")),
data = exact_pvalue[[1]])
grob <- grobTree(textGrob(paste("Wilcoxon, Pdjusted=",p.adjust(pvals)[1]), x=0.1,  y=0.95, hjust=0,
gp=gpar(col="black", fontsize=10, fontface="italic")))
ggboxplot(subtype, x = "tripleN_clinic", y = "sor_eta",
color = "tripleN_clinic", palette =c( "#E7B800", "#FC4E07"),
add = "jitter")+  annotation_custom(grob)
#perform exact test
pvals=round(as.numeric(c(wilcox.test(subtype$sor_eta~subtype$tripleN_clinic)[[3]],
wilcox.test(subtype$nmut~subtype$tripleN_clinic)[[3]],
wilcox.test(subtype$linear_all~subtype$tripleN_clinic)[[3]],
wilcox.test(subtype$trunk_percentage~subtype$tripleN_clinic)[[3]])),5)
p.adjust(pvals)
grob <- grobTree(textGrob(paste("Wilcoxon, Pdjusted=",p.adjust(pvals)[1]), x=0.1,  y=0.95, hjust=0,
gp=gpar(col="black", fontsize=10, fontface="italic")))
ggboxplot(subtype, x = "tripleN_clinic", y = "sor_eta",
color = "tripleN_clinic", palette =c( "#E7B800", "#FC4E07"),
add = "jitter")+  annotation_custom(grob)
grob <- grobTree(textGrob(paste("Wilcoxon, Pdjusted=",p.adjust(pvals)[1]), x=0.1,  y=1, hjust=0,
gp=gpar(col="black", fontsize=10, fontface="italic")))
ggboxplot(subtype, x = "tripleN_clinic", y = "sor_eta",
color = "tripleN_clinic", palette =c( "#E7B800", "#FC4E07"),
add = "jitter")+  annotation_custom(grob)
grob <- grobTree(textGrob(paste("Wilcoxon, Pdjusted=",p.adjust(pvals)[1]), x=0.1,  y=0.99, hjust=0,
gp=gpar(col="black", fontsize=10, fontface="italic")))
ggboxplot(subtype, x = "tripleN_clinic", y = "sor_eta",
color = "tripleN_clinic", palette =c( "#E7B800", "#FC4E07"),
add = "jitter")+  annotation_custom(grob) # Add pairwise comparisons p-value
grob <- grobTree(textGrob(paste("Wilcoxon, Pdjusted=",p.adjust(pvals)[1]), x=0.1,  y=0.98, hjust=0,
gp=gpar(col="black", fontsize=10, fontface="italic")))
ggboxplot(subtype, x = "tripleN_clinic", y = "sor_eta",
color = "tripleN_clinic", palette =c( "#E7B800", "#FC4E07"),
add = "jitter")+  annotation_custom(grob) # Add pairwise comparisons p-value
grob <- grobTree(textGrob(paste("Wilcoxon, Pdjusted=",p.adjust(pvals)[2]), x=0.1,  y=0.98, hjust=0,
gp=gpar(col="black", fontsize=10, fontface="italic")))
B=ggboxplot(subtype, x = "tripleN_clinic", y = "nmut",
color = "tripleN_clinic", palette =c( "#E7B800", "#FC4E07"),
add = "jitter")+annotation_custom(grob)+ylab("Number of mutations per patient")
grob <- grobTree(textGrob(paste("Wilcoxon, Pdjusted=",p.adjust(pvals)[1]), x=0.1,  y=0.98, hjust=0,
gp=gpar(col="black", fontsize=10, fontface="italic")))
A=ggboxplot(subtype, x = "tripleN_clinic", y = "sor_eta",
color = "tripleN_clinic", palette =c( "#E7B800", "#FC4E07"),
add = "jitter")+  annotation_custom(grob) # Add pairwise comparisons p-value
+ylab("Heterogeneity by Sorensen Index")
grob <- grobTree(textGrob(paste("Wilcoxon, Pdjusted=",p.adjust(pvals)[2]), x=0.1,  y=0.98, hjust=0,
gp=gpar(col="black", fontsize=10, fontface="italic")))
B=ggboxplot(subtype, x = "tripleN_clinic", y = "nmut",
color = "tripleN_clinic", palette =c( "#E7B800", "#FC4E07"),
add = "jitter")+annotation_custom(grob)+ylab("Number of mutations per patient")
grob <- grobTree(textGrob(paste("Wilcoxon, Pdjusted=",p.adjust(pvals)[3]), x=0.1,  y=0.98, hjust=0,
gp=gpar(col="black", fontsize=10, fontface="italic")))
C=ggboxplot(subtype, x = "tripleN_clinic", y = "linear_all",
color = "tripleN_clinic", palette =c( "#E7B800", "#FC4E07"),
add = "jitter")+annotation_custom(grob) # Add pairwise comparisons p-value
grob <- grobTree(textGrob(paste("Wilcoxon, Pdjusted=",p.adjust(pvals)[1]), x=0.1,  y=0.98, hjust=0,
gp=gpar(col="black", fontsize=10, fontface="italic")))
A=ggboxplot(subtype, x = "tripleN_clinic", y = "sor_eta",
color = "tripleN_clinic", palette =c( "#E7B800", "#FC4E07"),
add = "jitter")+  annotation_custom(grob)+ # Add pairwise comparisons p-value
ylab("Heterogeneity by Sorensen Index")
grob <- grobTree(textGrob(paste("Wilcoxon, Pdjusted=",p.adjust(pvals)[2]), x=0.1,  y=0.98, hjust=0,
gp=gpar(col="black", fontsize=10, fontface="italic")))
B=ggboxplot(subtype, x = "tripleN_clinic", y = "nmut",
color = "tripleN_clinic", palette =c( "#E7B800", "#FC4E07"),
add = "jitter")+annotation_custom(grob)+ylab("Number of mutations per patient")
grob <- grobTree(textGrob(paste("Wilcoxon, Pdjusted=",p.adjust(pvals)[3]), x=0.1,  y=0.98, hjust=0,
gp=gpar(col="black", fontsize=10, fontface="italic")))
C=ggboxplot(subtype, x = "tripleN_clinic", y = "linear_all",
color = "tripleN_clinic", palette =c( "#E7B800", "#FC4E07"),
add = "jitter")+annotation_custom(grob) # Add pairwise comparisons p-value
+ylab("Linearity")
grob <- grobTree(textGrob(paste("Wilcoxon, Pdjusted=",p.adjust(pvals)[4]), x=0.1,  y=0.98, hjust=0,
gp=gpar(col="black", fontsize=10, fontface="italic")))
grob <- grobTree(textGrob(paste("Wilcoxon, Pdjusted=",p.adjust(pvals)[1]), x=0.1,  y=0.98, hjust=0,
gp=gpar(col="black", fontsize=10, fontface="italic")))
A=ggboxplot(subtype, x = "tripleN_clinic", y = "sor_eta",
color = "tripleN_clinic", palette =c( "#E7B800", "#FC4E07"),
add = "jitter")+  annotation_custom(grob)+ # Add pairwise comparisons p-value
ylab("Heterogeneity by Sorensen Index")
grob <- grobTree(textGrob(paste("Wilcoxon, Pdjusted=",p.adjust(pvals)[2]), x=0.1,  y=0.98, hjust=0,
gp=gpar(col="black", fontsize=10, fontface="italic")))
B=ggboxplot(subtype, x = "tripleN_clinic", y = "nmut",
color = "tripleN_clinic", palette =c( "#E7B800", "#FC4E07"),
add = "jitter")+annotation_custom(grob)+ylab("Number of mutations per patient")
grob <- grobTree(textGrob(paste("Wilcoxon, Pdjusted=",p.adjust(pvals)[3]), x=0.1,  y=0.98, hjust=0,
gp=gpar(col="black", fontsize=10, fontface="italic")))
C=ggboxplot(subtype, x = "tripleN_clinic", y = "linear_all",
color = "tripleN_clinic", palette =c( "#E7B800", "#FC4E07"),
add = "jitter")+annotation_custom(grob)+ # Add pairwise comparisons p-value
ylab("Linearity")
grob <- grobTree(textGrob(paste("Wilcoxon, Pdjusted=",p.adjust(pvals)[4]), x=0.1,  y=0.98, hjust=0,
gp=gpar(col="black", fontsize=10, fontface="italic")))
D=ggboxplot(subtype, x = "tripleN_clinic", y = "trunk_percentage",
color = "tripleN_clinic", palette =c( "#E7B800", "#FC4E07"),
add = "jitter")+annotation_custom(grob) + # Add pairwise comparisons p-value
ylab("Truncality")
cowplot::plot_grid(A, B, labels = "AUTO")
cowplot::plot_grid(C, D, labels = "AUTO")
ggboxplot(subtype, x = "tripleN_clinic", y = "trunk_percentage",
color = "tripleN_clinic", palette =c( "#E7B800", "#FC4E07"),
add = "jitter")+annotation_custom(grob) + # Add pairwise comparisons p-value
ylab("Truncality")+theme(legend.position="right")
shapiro.test(subtype$exclusive_clones)
wilcox.test(subtype$exclusive_clones~subtype$focality)
cor(subtype$sor_eta,subtype$exclusive_clones)
cor(subtype$sor_phi,subtype$exclusive_clones)
shapiro.test(subtype$exclusive_clones)
wilcox.test(subtype$exclusive_clones~subtype$tripleN_clinic)
cdi
##check cdi and sdi
setwd("~/Desktop/pt/pairtree/final_withoutcnv_4/json/")
library(tidyr)
cdi <- read.delim("cdi.txt",sep = " ",header = F)
sdi <- read.delim("sdi.txt",sep = " ",header = F)
df <- cbind(cdi,sdi[2])
colnames(df) <- c("patient","cdi","sdi")
#plot1 <- rna_raw_subtype[,c(2,5)]
table(subtype_sample$Case %in% df$patient)
View(df)
colnames(df) <- c("patient","cdi","sdi")
setwd("~/Desktop/jan/june_omics/dist/beta/")
subtype_sample <- readxl::read_xlsx("gina-rna-dna.xlsx", sheet = 1)
subtype_sample <-  subtype_sample[,-c(4)]
subtype_sample <- na.omit(subtype_sample)
setwd("~/Desktop/jan/")
subtype_sample <- readxl::read_xlsx("gina-rna-dna.xlsx", sheet = 1)
subtype_sample <-  subtype_sample[,-c(4)]
subtype_sample <- na.omit(subtype_sample)
#plot1 <- rna_raw_subtype[,c(2,5)]
table(subtype_sample$Case %in% df$patient)
subtype$patient
#plot1 <- rna_raw_subtype[,c(2,5)]
table(subtype_sample$patient %in% df$patient)
df$patient
subtype_sample <- readxl::read_xlsx("gina-rna-dna.xlsx", sheet = 3)
subtype_sample <-  subtype_sample[,-c(4)]
subtype_sample <- na.omit(subtype_sample)
#plot1 <- rna_raw_subtype[,c(2,5)]
table(subtype_sample$Case %in% df$patient)
subtype_sample$patient=gsub("\\ .*","",subtype_sample$...2)
subtype_sample$Case
#plot1 <- rna_raw_subtype[,c(2,5)]
table(subtype_sample$patient %in% df$patient)
subtype_sample$patient
setwd("~/Desktop/jan/")
subtype_sample <- readxl::read_xlsx("gina-rna-dna.xlsx", sheet = 4)
subtype_sample <-  subtype_sample[,-c(4)]
subtype_sample <- na.omit(subtype_sample)
#plot1 <- rna_raw_subtype[,c(2,5)]
table(subtype_sample$patient %in% df$patient)
subtype_sample
setwd("~/Desktop/jan/")
subtype_sample <- readxl::read_xlsx("gina-rna-dna.xlsx", sheet = 4)
View(subtype_sample)
subtype_sample <-  subtype_sample[,-c(4)]
subtype_sample <- na.omit(subtype_sample)
subtype_sample <- readxl::read_xlsx("gina-rna-dna.xlsx", sheet = 4)
subtype_sample <-  subtype_sample[,-c(4)]
na.omit(subtype_sample)
complete.cases(subtype_sample)
subtype_sample <- readxl::read_xlsx("gina-rna-dna.xlsx", sheet = 4)
subtype_sample <-  subtype_sample[,-c(4,5)]
subtype_sample <- na.omit(subtype_sample)
#plot1 <- rna_raw_subtype[,c(2,5)]
table(subtype_sample$patient %in% df$patient)
#plot1 <- rna_raw_subtype[,c(2,5)]
table(subtype_sample$Case %in% df$patient)
subtype_sample$patient=gsub("\\ .*","",subtype_sample$...2)
df$pa=gsub("B.*","",df$patient)
cdi  <- cdi[cdi$V1 %in% subtype_sample$Case,]
sdi <- sdi[sdi$V1 %in% subtype_sample$Case,]
subtype_sample <- subtype_sample[subtype_sample$Case  %in% df$patient, ]
subtype_sample<- subtype_sample[order(subtype_sample$Case),]
cdi <- cdi[order(cdi$V1),]
sdi <- sdi[order(sdi$V1),]
subtype_sample$cdi  <- cdi$V2
subtype_sample$sdi <- sdi$V2
subtype_sample$Case[3:4]  <- c("L13B6D", "L13B9D")
#calculate ssm per  sample
setwd("~/Desktop/normal/revisit_freq_filtering_May/all_f1/ssm")
files=list.files()
library(stringr)
all_sample=c()
for (i in 1:length(files)) {
tmp=files[i]
pa=gsub("\\..*","",tmp)
pa_samplename=df$patient[df$pa==pa]
tmp_df=read.table(tmp)[,4]
g=str_count(tmp_df[1],pattern = ",")+1
tmp_df=str_split_fixed(tmp_df, ",", g)
for(j in 1:ncol(tmp_df)){
names(pa_samplename)[j]=sum(tmp_df[,j]!="1", na.rm = TRUE)
}
all_sample=c(all_sample,pa_samplename)
}
shapiro.test(subtype_sample$cdi~subtype_sample$Subtype)
subtype_sample$Case[3:4]  <- c("L13B6D", "L13B9D")
subtype_sample$basal="others"
subtype_sample$basal[subtype_sample$Subtype=="Basal"]="basal"
wilcox.test(subtype_sample$cdi~subtype_sample$basal)
wilcox.test(subtype_sample$sdi~subtype_sample$basal)
comn
combn
combn(files)
View(tmp_b)
read.csv("~/Desktop/jan/june_omics/dist/beta/comb_ks_pairwise.csv")
ks_pairfhsub=read.csv("~/Desktop/jan/june_omics/dist/beta/comb_ks_pairwise.csv")
View(ks_pairfhsub)
ks_pairfhsub=data.frame(read.csv("~/Desktop/jan/june_omics/dist/beta/comb_ks_pairwise.csv"))
ks=ks_pairfhsub[,-1]
ks_pairfhsub=ks_pairfhsub[,-1]
try=merge(ks_pairfhsub,tmp_b,by("site1","site2"))
try=merge(ks_pairfhsub,tmp_b,by=c("site1","site2"))
View(try)
ks_pairfhsub$tag=paste(ks_pairfhsub$site1,ks_pairfhsub$site2,sep = "-")
tmp_b$tag=paste(tmp_b$site1,tmp_b$site2,sep = "-")
library(dplyr)
library(tidyr)
df1=tmp_b
df1 %>%
separate_rows(tag) %>%
group_by(rownames(df1)) %>%
summarise(tag = paste(sort(tag), collapse='-'))
tmp_b
df1 %>%
separate_rows(tag) %>%
summarise(tag = paste(sort(tag), collapse='-'))
View(df1)
ks_pairfhsub %>%
separate_rows(tag) %>%
summarise(tag = paste(sort(tag), collapse='-'))
seperate_rows()
separate_rows()
separate_rows
df1 %>%
separate_rows(tag,sep="-") %>%
summarise(tag = paste(sort(tag), collapse='-'))
ks_pairfhsub %>%
separate_rows(tag,sep="-") %>%
summarise(tag = paste(sort(tag), collapse='-'))
merge(df1,ks_pairfhsub,by="tag")
library(dplyr)
library(tidyr)
df1 %>%
separate_rows(tag,sep="-")
a=df1 %>%
separate_rows(tag,sep="-") %>%
summarise(tag = paste(sort(tag), collapse='-'))
View(a)
paste(sort(tag), collapse='-')
paste(sort(df1$tag), collapse='-')
a=df1 %>%
separate_rows(tag,sep="-")
View(a)
sapply(lapply(strsplit(x, NULL), sort), paste, collapse="-")
strSort <- function(x)
)
strSort <- function(x){sapply(lapply(strsplit(x, NULL), sort), paste, collapse="-")}
strSort <- function(x){sapply(lapply(strsplit(x, "-"), sort), paste, collapse="-")}
strSort(tmp_b$tag)
df1$sort_tag=strSort(df1$tag)
ks_pairfhsub$sort_tag=strSort(ks_pairfhsub$tag)
merge(df1,ks_pairfhsub,by="sort_tag")
compare_tmpb_ks=merge(df1,ks_pairfhsub,by="sort_tag")
View(compare_tmpb_ks)
cor(compare_tmpb_ks$sor_eta,compare_tmpb_ks$ks_d)
cor(compare_tmpb_ks$sor_eta,compare_tmpb_ks$fhsub_pair)
cor(compare_tmpb_ks$ks_d,compare_tmpb_ks$fhsub_pair)
cor(compare_tmpb_ks$dist,compare_tmpb_ks$fhsub_pair)
cor(compare_tmpb_ks$ks_d,compare_tmpb_ks$dist)
cor(compare_tmpb_ks$ks_d[compare_tmpb_ks$basal=="basal",],compare_tmpb_ks$dist[compare_tmpb_ks$basal=="basal",])
cor(compare_tmpb_ks$ks_d[compare_tmpb_ks$basal=="basal"],compare_tmpb_ks$dist[compare_tmpb_ks$basal=="basal"])
cor(compare_tmpb_ks$fhsub_pair[compare_tmpb_ks$basal=="basal"],compare_tmpb_ks$dist[compare_tmpb_ks$basal=="basal"])
cor(compare_tmpb_ks$fhsub_pair[compare_tmpb_ks$basal=="no"],compare_tmpb_ks$dist[compare_tmpb_ks$basal=="no"])
cor(compare_tmpb_ks$fhsub_pair[compare_tmpb_ks$basal=="no"],compare_tmpb_ks$dist[compare_tmpb_ks$basal=="no"],use = "complate.obs")
cor(compare_tmpb_ks$fhsub_pair[compare_tmpb_ks$basal=="no"],compare_tmpb_ks$dist[compare_tmpb_ks$basal=="no"],use = "complete.obs")
cor(compare_tmpb_ks$fhsub_pair[compare_tmpb_ks$basal=="no"],compare_tmpb_ks$dist[compare_tmpb_ks$basal=="no"],use = "complete.obv")
cor(compare_tmpb_ks$fhsub_pair[compare_tmpb_ks$basal=="no"],compare_tmpb_ks$dist[compare_tmpb_ks$basal=="no"],use = "complete.obvs")
cor(compare_tmpb_ks$fhsub_pair[compare_tmpb_ks$basal=="no"],compare_tmpb_ks$dist[compare_tmpb_ks$basal=="no"],use = "complete.obs")
cor(compare_tmpb_ks$fhsub_pair[compare_tmpb_ks$basal=="other"],compare_tmpb_ks$dist[compare_tmpb_ks$basal=="other"],use = "complete.obs")
cor(compare_tmpb_ks$ks_d[compare_tmpb_ks$basal=="other"],compare_tmpb_ks$dist[compare_tmpb_ks$basal=="other"],use = "complete.obs")
cor(compare_tmpb_ks$ks_d[compare_tmpb_ks$basal=="other"],compare_tmpb_ks$rna_cos[compare_tmpb_ks$basal=="other"],use = "complete.obs")
cor(compare_tmpb_ks$ks_d[compare_tmpb_ks$basal=="basal"],compare_tmpb_ks$rna_cos[compare_tmpb_ks$basal=="basal"],use = "complete.obs")
cor(compare_tmpb_ks$ks_d,compare_tmpb_ks$rna_cos,use = "complete.obs")
cor(compare_tmpb_ks$fhsub_pair,compare_tmpb_ks$rna_cos,use = "complete.obs")
cor(compare_tmpb_ks$fhsub_pair,compare_tmpb_ks$rna_cos,use = "complete.obs")
cor(compare_tmpb_ks$ks_d[compare_tmpb_ks$basal=="basal"],compare_tmpb_ks$rna_cos[compare_tmpb_ks$basal=="basal"],use = "complete.obs")
cor(compare_tmpb_ks$ks_d[compare_tmpb_ks$basal=="other"],compare_tmpb_ks$rna_cos[compare_tmpb_ks$basal=="other"],use = "complete.obs")
cor(compare_tmpb_ks$ks_d[compare_tmpb_ks$basal=="basal"],compare_tmpb_ks$dist[compare_tmpb_ks$basal=="basal"],use = "complete.obs")
cor(compare_tmpb_ks$ks_d[compare_tmpb_ks$basal=="other"],compare_tmpb_ks$dist[compare_tmpb_ks$basal=="other"],use = "complete.obs")
cor(compare_tmpb_ks$ks_d[compare_tmpb_ks$basal=="other"],compare_tmpb_ks$dist[compare_tmpb_ks$basal=="other"],use = "complete.obs")
cor(compare_tmpb_ks$ks_d[compare_tmpb_ks$basal=="basal"],compare_tmpb_ks$dist[compare_tmpb_ks$basal=="basal"],use = "complete.obs")
cor(compare_tmpb_ks$ks_d[compare_tmpb_ks$basal=="basal"],compare_tmpb_ks$rna_cos[compare_tmpb_ks$basal=="basal"],use = "complete.obs")
cor(compare_tmpb_ks$ks_d[compare_tmpb_ks$basal=="other"],compare_tmpb_ks$rna_cos[compare_tmpb_ks$basal=="other"],use = "complete.obs")
cor(compare_tmpb_ks$ks_d,compare_tmpb_ks$rna_cos,use = "complete.obs")
cor(compare_tmpb_ks$ks_d,compare_tmpb_ks$dist,use = "complete.obs")
cor(compare_tmpb_ks$fhsub_pair,compare_tmpb_ks$dist,use = "complete.obs")
cor(compare_tmpb_ks$fhsub_pair[compare_tmpb_ks$basal=="basal"],compare_tmpb_ks$dist[compare_tmpb_ks$basal=="basal"],use = "complete.obs")
cor(compare_tmpb_ks$fhsub_pair[compare_tmpb_ks$basal=="other"],compare_tmpb_ks$dist[compare_tmpb_ks$basal=="other"],use = "complete.obs")
corrplot(data.matrix(cor_x),type='lower',
addCoef.col ='black',method="circle", insig="blank",diag=F,
number.cex = 0.8,p.mat = data.matrix(pval_x),
col=colorRampPalette(c("yellow2","goldenrod","darkred"))(100),addrect = 2)
#col <- colorRampPalette(c("#BB4444", "#EE9988", "#FFFFFF", "#77AADD", "#4477AA"))
corrplot(cor_all, method="color",
type="upper",
addCoef.col = "black", # Add coefficient of correlation
tl.col="black", tl.srt=45, #Text label color and rotation
# Combine with significance
p.mat = p.mat, sig.level = 0.1, insig = "blank",
# hide correlation coefficient on the principal diagonal
diag=FALSE
)
#perform exact test
pvals=round(as.numeric(c(wilcox.test(subtype$sor_eta~subtype$tripleN_clinic)[[3]],
wilcox.test(subtype$nmut~subtype$tripleN_clinic)[[3]],
wilcox.test(subtype$linear_all~subtype$tripleN_clinic)[[3]],
wilcox.test(subtype$trunk_percentage~subtype$tripleN_clinic)[[3]],
wilcox.test(subtype$exclusive_clones~subtype$tripleN_clinic)[[3]]),
),5)
p.adjust(pvals)
pvals
wilcox.test(subtype$exclusive_clones~subtype$tripleN_clinic)[[3]])
wilcox.test(subtype$exclusive_clones~subtype$tripleN_clinic)[[3]]
#perform exact test
pvals=round(as.numeric(c(wilcox.test(subtype$sor_eta~subtype$tripleN_clinic)[[3]],
wilcox.test(subtype$nmut~subtype$tripleN_clinic)[[3]],
wilcox.test(subtype$linear_all~subtype$tripleN_clinic)[[3]],
wilcox.test(subtype$trunk_percentage~subtype$tripleN_clinic)[[3]],
wilcox.test(subtype$exclusive_clones~subtype$tripleN_clinic)[[3]])),5)
pvals
p.adjust(pvals)
grob <- grobTree(textGrob(paste("Wilcoxon, Pdjusted=",p.adjust(pvals)[1]), x=0.1,  y=0.98, hjust=0,
gp=gpar(col="black", fontsize=10, fontface="italic")))
A=ggboxplot(subtype, x = "tripleN_clinic", y = "sor_eta",
color = "tripleN_clinic", palette =c( "#E7B800", "#FC4E07"),
add = "jitter")+  annotation_custom(grob)+ # Add pairwise comparisons p-value
ylab("Heterogeneity by Sorensen Index")
grob <- grobTree(textGrob(paste("Wilcoxon, Pdjusted=",p.adjust(pvals)[2]), x=0.1,  y=0.98, hjust=0,
gp=gpar(col="black", fontsize=10, fontface="italic")))
B=ggboxplot(subtype, x = "tripleN_clinic", y = "nmut",
color = "tripleN_clinic", palette =c( "#E7B800", "#FC4E07"),
add = "jitter")+annotation_custom(grob)+ylab("Number of mutations per patient")
grob <- grobTree(textGrob(paste("Wilcoxon, Pdjusted=",p.adjust(pvals)[3]), x=0.1,  y=0.98, hjust=0,
gp=gpar(col="black", fontsize=10, fontface="italic")))
C=ggboxplot(subtype, x = "tripleN_clinic", y = "linear_all",
color = "tripleN_clinic", palette =c( "#E7B800", "#FC4E07"),
add = "jitter")+annotation_custom(grob)+ # Add pairwise comparisons p-value
ylab("Linearity")
grob <- grobTree(textGrob(paste("Wilcoxon, Pdjusted=",p.adjust(pvals)[4]), x=0.1,  y=0.98, hjust=0,
gp=gpar(col="black", fontsize=10, fontface="italic")))
D=ggboxplot(subtype, x = "tripleN_clinic", y = "trunk_percentage",
color = "tripleN_clinic", palette =c( "#E7B800", "#FC4E07"),
add = "jitter")+annotation_custom(grob) + # Add pairwise comparisons p-value
ylab("Truncality")+theme(legend.position="right")
#combine all pval and adjust
read_xlsx("p_val_mar.xlsx")
#combine all pval and adjust
read_xlsx("~/Desktop/jan/june_omics/dist/beta/p_val_mar.xlsx")
#combine all pval and adjust
all_p=read_xlsx("~/Desktop/jan/june_omics/dist/beta/p_val_mar.xlsx")
p.adjust(pvals,method="fdr")
p.adjust(all_p$pval,method="fdr")
add_p$p.adjust=p.adjust(all_p$pval,method="fdr")
all_p$p.adjust=p.adjust(all_p$pval,method="fdr")
library("xlsx")
install.packages("xlsx")
library(xlsx)
write.xlsx(all_p,file = "~/Desktop/jan/june_omics/dist/beta/p_val_mar.xlsx")
#combine all pval and adjust
all_p=data.frame(read_xlsx("~/Desktop/jan/june_omics/dist/beta/p_val_mar.xlsx"))
all_p$p.adjust=p.adjust(all_p$pval,method="fdr")
all_p$p.adjust
write.xlsx(all_p,file = "~/Desktop/jan/june_omics/dist/beta/p_val_mar.xlsx")
d=1
